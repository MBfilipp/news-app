{"version":3,"sources":["AdditionalFunc/randomColor.js","Components/Modal.jsx","Components/Card.jsx","App.js","AdditionalFunc/sliceText.js","serviceWorker.js","index.js"],"names":["colors","randomColor","color","Math","floor","random","length","Modal","M","init","this","inDuration","outDuration","opacity","dismissible","startingTop","endingTop","ref","id","className","style","props","text","href","Component","Card","title","fullText","pText","quotes","button","generateQuotes","data-target","rel","target","encodeURIComponent","backgroundColor","onClick","setTimeout","toast","html","displayLength","classes","App","useRef","useState","setQuotes","setColor","setFullText","event","a","preventDefault","current","classList","toggle","fetch","method","data","json","dataJson","last","slice","console","log","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c23ec893.chunk.js","sourcesContent":["let colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\r\n\r\nexport const randomColor = () => {\r\n    let color = Math.floor(Math.random() * colors.length)\r\n\r\n    return colors[color]\r\n}","import React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport \"materialize-css\";\r\n\r\nclass Modal extends Component {\r\n  componentDidMount() {\r\n    const options = {\r\n      inDuration: 250,\r\n      outDuration: 250,\r\n      opacity: 0.8,\r\n      dismissible: false,\r\n      startingTop: \"4%\",\r\n      endingTop: \"10%\"\r\n    };\r\n    M.Modal.init(this.Modal, options);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div ref={Modal => this.Modal = Modal} id=\"modal1\" className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <h4 className=\"modal-title\" style={{ color: this.props.color }}>Новость</h4>\r\n            <p className=\"modal-p\" style={{ color: this.props.color }}>{this.props.text}</p>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <a href=\"/news-app/\" style={{ color: this.props.color }} className=\"modal-close waves-effect waves-red btn-flat\">\r\n              Закрыть\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;","import React from \"react\"\r\nimport \"materialize-css\"\r\nimport Modal from \"./Modal\"\r\n\r\nexport const Card = ({\r\n    title = \"Новости\",\r\n    color = \"#fff\",\r\n    fullText = \"Здесь должна быть новость\",\r\n    pText = \"\",\r\n    quotes = \"Здесь должна быть новость\",\r\n    button = \"\",\r\n    generateQuotes = () => {}\r\n}) => {\r\n    return (\r\n        <>\r\n      <div className=\"container\">\r\n        <style>{`body { background-color: ${color}; }`}</style>\r\n        <div className=\"row center\">\r\n          <div className=\"col s12 m10 l8 xl8 offset-m1 offset-s1 offset-l2 offset-xl2\">\r\n            <div className=\"card lighten-5\">\r\n              <div className=\"card-content white-text\">\r\n                <span className=\"card-title\" style={{ color }}>{title}</span>\r\n                <p ref={pText} className=\"quotes-p\" style={{ color }}>\r\n                  <span className=\"mini-icon modal-trigger waves-light\" data-target=\"modal1\">&#9998;</span>\r\n                    {quotes}\r\n                  <span className=\"mini-icon modal-trigger next waves-light\" data-target=\"modal1\">&#9998;</span>\r\n                </p>\r\n              </div>\r\n              <div className=\"card-action\">\r\n                <a className=\"btn-floating btn-large waves-effect waves-light red favicon\" rel=\"noopener noreferrer\" target=\"_blank\" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(fullText)}`}>\r\n                  <i style={{ backgroundColor: color }} className=\"fab fa-twitter\"></i>\r\n                </a>\r\n                <a href=\"/#\" ref={button} onClick={generateQuotes} className=\"waves-effect btn btn-size\" style={{ backgroundColor: color }}>Генерировать</a>\r\n              </div>\r\n              <Modal color={color} text={fullText}></Modal>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n    )\r\n}","import React, { useState, useRef } from 'react'\nimport 'materialize-css'\nimport M from \"materialize-css\"\nimport { randomColor } from './AdditionalFunc/randomColor'\nimport { sliceText } from './AdditionalFunc/sliceText'\nimport { Card } from './Components/Card'\n\nsetTimeout(() => {\n    M.toast({\n      html: '<span>Что бы посмотреть полную новость нажмите на &#9998;</span>', \n      displayLength: 60000,\n      classes: 'rounded'\n    })\n}, 5000)\n\nsetTimeout(() => {\n  M.toast({\n    html: 'Что бы посмотреть страницу на github нажмите <a href=\"https://github.com/MBfilipp\" rel=\"noopener noreferrer\" target=\"_blank\"><i class=\"fab fa-github\"></i></a>', \n    displayLength: 60000,\n    classes: 'rounded'\n  })\n}, 10000)\n\nfunction App() {\n  const pText = useRef(null)\n  const button = useRef(null)\n  const [quotes, setQuotes] = useState(\"Здесь должна быть новость\")\n  const [color, setColor] = useState(\"orange\")\n  const [fullText, setFullText] = useState(\"Здесь должна быть новость\")\n\n  const generateQuotes = async (event) => {\n    event.preventDefault();\n    pText.current.classList.toggle(\"opacity\")\n    button.current.classList.toggle(\"disabled\")\n    setTimeout(() => {\n      pText.current.classList.toggle(\"opacity\")\n      button.current.classList.toggle(\"disabled\")\n    }, 1000)\n    try {\n\n      const data = await fetch(\"https://fish-text.ru/get?format=json&number=4&type=sentence\", \n        {\n          method: \"GET\",\n        }\n      )\n\n      const dataJson = await data.json()\n      setFullText(dataJson.text)\n      setTimeout(() => {\n        setQuotes(sliceText(dataJson.text, 50, \"...\"))\n      }, 700)\n      \n      setColor(randomColor());\n\n    } catch(e) {\n      console.log(e.message)\n      throw e\n    }\n    \n  }\n  return (\n    <Card \n      title=\"Новости\" \n      fullText={fullText} \n      color={color} \n      pText={pText} \n      generateQuotes={generateQuotes} \n      button={button} \n      quotes={quotes} \n    />\n  )\n}\n\nexport default App\n","export const sliceText = (text, length, last) => {\r\n    if(text.length > length) return text.slice(0, length) + last\r\n    \r\n    return text\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}